openapi: 3.1.0
info:
  title: Surf Booking Telegram Web App API
  version: 0.5.4
  description: "API для сервиса бронирования и оплаты тренировок по (серфинг, скейтсерфинг, вейксерфинг) и многодневных туров. Включает подарочные сертификаты, абонементы, лист ожидания, кэшбэк-кошелёк, админ-аудит и унифицированное создание бронирований"
servers:
- url: https://api.example.com
  description: Production
- url: https://staging.api.example.com
  description: Staging
tags:
- name: Auth
- name: Users
- name: Events
- name: Sessions
- name: Bookings
- name: Payments
- name: Refunds
- name: Certificates
- name: SeasonTickets
- name: Cashback
- name: Waitlist
- name: Admin
- name: Jobs
- name: Webhooks
security:
- bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    webhookSig:
      type: apiKey
      in: header
      name: X-Signature
  parameters:
    CursorParam:
      in: query
      name: cursor
      schema:
        type: string
      description: Курсор пагинации. Передавайте значение из поля 'next' предыдущего ответа.
    LimitParam:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
      description: Лимит элементов на страницу (используется совместно с cursor).
    StartsAfterParam:
      in: query
      name: startsAfter
      schema:
        type: string
        format: date-time
      description: Вернуть сущности, начинающиеся ПОСЛЕ этого момента (RFC3339).
    EndsBeforeParam:
      in: query
      name: endsBefore
      schema:
        type: string
        format: date-time
      description: Вернуть сущности, начинающиеся ДО этого момента (RFC3339).
    IdempotencyKeyHeader:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
        minLength: 8
        maxLength: 128
      description: Уникальный ключ идемпотентности запроса.
    LabelsAnyParam:
      in: query
      name: labels.any
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      description: Совпадение ЛЮБОГО из указанных ярлыков (OR).
    LabelsAllParam:
      in: query
      name: labels.all
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      description: Совпадение всех указанных ярлыков (AND).
    LabelsNoneParam:
      in: query
      name: labels.none
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      description: Исключить сессии с любым из указанных ярлыков (NOT).
    AttrEqParam:
      in: query
      name: attr.eq
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          oneOf:
          - type: string
          - type: number
          - type: integer
          - type: boolean
      description: Равенство по ключам атрибутов, напр. attr.eq[city]=istanbul
    AttrInParam:
      in: query
      name: attr.in
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          type: array
          items:
            oneOf:
            - type: string
            - type: number
            - type: integer
          minItems: 1
      description: Вхождение в набор значений, напр. attr.in[level]=[beginner,intermediate]
    AttrGteParam:
      in: query
      name: attr.gte
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          oneOf:
          - type: number
          - type: integer
      description: Порог ≥ для числовых атрибутов
    AttrLteParam:
      in: query
      name: attr.lte
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          oneOf:
          - type: number
          - type: integer
      description: Порог ≤ для числовых атрибутов
    AttrBoolParam:
      in: query
      name: attr.bool
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          type: boolean
      description: Фильтр по булевым атрибутам
    AttrExistsParam:
      in: query
      name: attr.exists
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          type: boolean
      description: Проверка наличия ключа (true/false)
    MinRemainingSeatsParam:
      in: query
      name: minRemainingSeats
      schema:
        type: integer
        minimum: 0
      description: Минимальное количество оставшихся мест
    SortByParam:
      in: query
      name: sortBy
      schema:
        type: string
        enum:
        - createdAt
        - startsAt
        default: startsAt
      description: Поле для сортировки
    SortOrderParam:
      in: query
      name: sortOrder
      schema:
        type: string
        enum:
        - asc
        - desc
        default: asc
      description: Порядок сортировки
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
      - code
      - message
      properties:
        code:
          type: string
          enum:
          - AMOUNT_MISMATCH
          - DUPLICATE_PAYMENT
          - HOLD_EXPIRED
          - NO_SEATS
          - PROVIDER_UNAVAILABLE
          - INVALID_CREDENTIALS
          - USER_EXISTS
          - WEAK_PASSWORD
          - INVALID_EMAIL
        message:
          type: string
        details:
          nullable: true
          description: Доп. сведения об ошибке
    Price:
      type: object
      required:
      - currency
      - amountMinor
      properties:
        currency:
          type: string
          description: ISO-4217, напр. KZT, USD, EUR
        amountMinor:
          type: integer
          description: Сумма в минорных единицах (копейках/центах)
    Role:
      type: string
      enum:
      - USER
      - ADMIN
    User:
      type: object
      required:
      - id
      - createdAt
      - role
      properties:
        id:
          type: string
        telegramId:
          type: integer
          nullable: true
          description: Telegram user ID (null для пользователей без Telegram)
        phone:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
          description: Уникальный username для авторизации (альтернатива email)
        email:
          type: string
          nullable: true
        photoUrl:
          type: string
          nullable: true
          description: URL фотографии профиля
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        authMethod:
          type: string
          enum:
          - telegram
          - email
          - username
          description: Способ авторизации пользователя
    UserUpdateDto:
      type: object
      properties:
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
      additionalProperties: false
    LoginDto:
      type: object
      required:
      - login
      - password
      properties:
        login:
          type: string
          description: Email или username для авторизации
        password:
          type: string
          format: password
          minLength: 6
      additionalProperties: false
    TelegramLoginDto:
      type: object
      required:
      - initData
      properties:
        initData:
          type: string
          description: Telegram Web App initData
      additionalProperties: false
    RegisterDto:
      type: object
      required:
      - password
      properties:
        email:
          type: string
          format: email
          description: Email пользователя (обязателен, если не указан username)
        username:
          type: string
          pattern: ^[a-zA-Z0-9_-]{3,32}$
          description: Уникальный username (обязателен, если не указан email)
        password:
          type: string
          format: password
          minLength: 6
          description: Пароль пользователя
        firstName:
          type: string
          maxLength: 128
        lastName:
          type: string
          maxLength: 128
        phone:
          type: string
          pattern: ^\+?[0-9]{7,15}$
        role:
          $ref: '#/components/schemas/Role'
          description: Роль пользователя (только ADMIN может указать роль при регистрации)
      additionalProperties: false
    AuthResponse:
      type: object
      required:
      - accessToken
      - refreshToken
      - user
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
    EventDescription:
      type: object
      required:
      - heading
      - body
      properties:
        heading:
          type: string
        body:
          type: string
    Event:
      type: object
      required:
      - id
      - title
      - tickets
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: array
          items:
            $ref: '#/components/schemas/EventDescription'
          nullable: true
        location:
          type: string
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
          description: Вместимость по умолчанию для сессий этого события. Может быть переопределена в конкретной сессии.
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/EventTicket'
        createdAt:
          type: string
          format: date-time
        labels:
          type: array
          items:
            type: string
          description: Ярлыки события (фасеты), напр. sport:surf, city:istanbul.
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
    TicketPrice:
      type: object
      required:
      - price
      properties:
        price:
          $ref: '#/components/schemas/Price'
        description:
          type: string
          nullable: true
    EventTicket:
      type: object
      required:
      - id
      - name
      - prepayment
      - full
      properties:
        id:
          type: string
        name:
          type: string
        prepayment:
          $ref: '#/components/schemas/TicketPrice'
        full:
          $ref: '#/components/schemas/TicketPrice'
    EventCreateDto:
      type: object
      required:
      - title
      - tickets
      properties:
        title:
          type: string
        description:
          type: array
          items:
            $ref: '#/components/schemas/EventDescription'
          nullable: true
        location:
          type: string
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
          description: Вместимость по умолчанию для сессий этого события
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/EventTicketCreate'
        labels:
          type: array
          items:
            type: string
          description: Ярлыки события.
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
      additionalProperties: false
    EventTicketCreate:
      type: object
      required:
      - name
      - prepayment
      - full
      properties:
        name:
          type: string
        prepayment:
          $ref: '#/components/schemas/TicketPrice'
        full:
          $ref: '#/components/schemas/TicketPrice'
    Session:
      type: object
      required:
      - id
      - event
      - startsAt
      - remainingSeats
      properties:
        id:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
          description: Вместимость сессии. Если не указана, используется capacity из события.
        remainingSeats:
          type: integer
          minimum: 0
        hasBooking:
          type: boolean
          description: У текущего пользователя есть активная бронь
        onWaitlist:
          type: boolean
          description: Текущий пользователь в листе ожидания
        status:
          $ref: '#/components/schemas/SessionStatus'
        labels:
          type: array
          items:
            type: string
          nullable: true
          description: Ярлыки сессии (перекрывают/дополняют ярлыки события).
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
        effectiveLabels:
          type: array
          items:
            type: string
          readOnly: true
          description: Денормализованные ярлыки (Event ⊕ Session).
        effectiveAttributes:
          type: object
          readOnly: true
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Денормализованные атрибуты (Event ⊕ Session).
        createdAt:
          type: string
          format: date-time
    SessionCompact:
      type: object
      required:
      - id
      - eventId
      - startsAt
      - remainingSeats
      properties:
        id:
          type: string
        eventId:
          type: string
          description: ID события вместо полного объекта
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
          description: Вместимость сессии. Если не указана, используется capacity из события.
        remainingSeats:
          type: integer
          minimum: 0
        hasBooking:
          type: boolean
          description: У текущего пользователя есть активная бронь
        onWaitlist:
          type: boolean
          description: Текущий пользователь в листе ожидания
        status:
          $ref: '#/components/schemas/SessionStatus'
        labels:
          type: array
          items:
            type: string
          nullable: true
          description: Ярлыки сессии (перекрывают/дополняют ярлыки события).
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
        effectiveLabels:
          type: array
          items:
            type: string
          readOnly: true
          description: Денормализованные ярлыки (Event ⊕ Session).
        effectiveAttributes:
          type: object
          readOnly: true
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Денормализованные атрибуты (Event ⊕ Session).
        createdAt:
          type: string
          format: date-time
    BookingStatus:
      type: string
      enum:
      - HOLD
      - CONFIRMED
      - CANCELLED
      - EXPIRED
    Booking:
      type: object
      required:
      - id
      - sessionId
      - quantity
      - status
      - totalPrice
      properties:
        id:
          type: string
        sessionId:
          type: string
        userId:
          type: string
          nullable: true
          description: ID пользователя. Может быть null для гостевых бронирований, созданных админом
        quantity:
          type: integer
          minimum: 1
        status:
          $ref: '#/components/schemas/BookingStatus'
        hold:
          type: object
          nullable: true
          properties:
            expiresAt:
              type: string
              format: date-time
        totalPrice:
          $ref: '#/components/schemas/Price'
        guestContact:
          $ref: '#/components/schemas/GuestContact'
          nullable: true
          description: Контактные данные гостя для бронирований без регистрации (создается админом)
        notes:
          type: string
          nullable: true
          description: Заметки администратора о бронировании
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
          description: ID пользователя (админа), создавшего бронирование
    BookingExtended:
      allOf:
        - $ref: '#/components/schemas/Booking'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
              description: Информация о пользователе (доступно при запросе с правами ADMIN)
            guestContact:
              $ref: '#/components/schemas/GuestContact'
              description: Контактные данные гостя (если бронирование создано админом без привязки к пользователю)
            session:
              $ref: '#/components/schemas/Session'
              description: Информация о сессии (включается при использовании параметра includeSession)
            paymentInfo:
              type: object
              nullable: true
              properties:
                method:
                  type: string
                  enum: [card, certificate, pass, cashback, composite]
                  description: Метод оплаты
                paymentId:
                  type: string
                  nullable: true
                  description: ID платежа (если применимо)
                certificateId:
                  type: string
                  nullable: true
                  description: ID использованного сертификата (если применимо)
                seasonTicketId:
                  type: string
                  nullable: true
                  description: ID использованного абонемента (если применимо)
              description: Информация об оплате (доступно при запросе с правами ADMIN)
    GuestContact:
      type: object
      required:
      - phone
      properties:
        phone:
          type: string
          pattern: ^\+?[0-9]{7,15}$
          description: Телефон гостя (обязательное поле)
        firstName:
          type: string
          nullable: true
          maxLength: 128
          description: Имя гостя
        lastName:
          type: string
          nullable: true
          maxLength: 128
          description: Фамилия гостя
        email:
          type: string
          format: email
          nullable: true
          description: Email гостя
        note:
          type: string
          nullable: true
          maxLength: 500
          description: Дополнительные заметки админа о госте
    BookingCreateDto:
      type: object
      required:
      - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          description: Количество мест для бронирования
        userId:
          type: string
          nullable: true
          description: |
            ID пользователя для бронирования (только ADMIN).
            Если не указан, бронирование создается для текущего пользователя.
        guestContact:
          $ref: '#/components/schemas/GuestContact'
          nullable: true
          description: |
            Контактные данные гостя без регистрации (только ADMIN).
            Используется для создания гостевых бронирований.
            Нельзя использовать одновременно с userId.
        status:
          type: string
          enum:
          - HOLD
          - CONFIRMED
          default: HOLD
          description: |
            Начальный статус брони (только ADMIN).
            CONFIRMED используется для немедленного подтверждения при офлайн оплате.
            Обычные пользователи всегда создают статус HOLD.
        ticketId:
          type: string
          nullable: true
          description: ID билета для расчета цены (только ADMIN)
        notes:
          type: string
          nullable: true
          maxLength: 1000
          description: Внутренние заметки администратора (только ADMIN)
      additionalProperties: false
    PaymentStatus:
      type: string
      enum:
      - PENDING
      - SUCCEEDED
      - FAILED
      - CANCELLED
    Payment:
      type: object
      required:
      - id
      - bookingId
      - amount
      - status
      properties:
        id:
          type: string
        bookingId:
          type: string
        amount:
          $ref: '#/components/schemas/Price'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        createdAt:
          type: string
          format: date-time
        provider:
          type: string
          enum:
          - telegram
          - stripe
          - yookassa
          - cloudpayments
          - other
        providerPaymentId:
          type: string
          nullable: true
        providerChargeId:
          type: string
          nullable: true
        nextAction:
          $ref: '#/components/schemas/PaymentNextAction'
    PaymentMethodRequest:
      oneOf:
      - type: object
        title: CardPayment
        required:
        - method
        properties:
          method:
            type: string
            enum:
            - card
          returnUrl:
            type: string
            format: uri
            description: Куда вернёт провайдер после оплаты
      - type: object
        title: CertificatePayment
        required:
        - method
        - certificateId
        properties:
          method:
            type: string
            enum:
            - certificate
          certificateId:
            type: string
      - type: object
        title: SeasonTicketPayment
        required:
        - method
        - seasonTicketId
        - passesToSpend
        properties:
          method:
            type: string
            enum:
            - pass
          seasonTicketId:
            type: string
          passesToSpend:
            type: integer
            minimum: 1
      - type: object
        title: CashbackPayment
        required:
        - method
        - amount
        properties:
          method:
            type: string
            enum:
            - cashback
          amount:
            $ref: '#/components/schemas/Price'
      discriminator:
        propertyName: method
        mapping:
          card: '#/components/schemas/PaymentMethodRequest/oneOf/0'
          certificate: '#/components/schemas/PaymentMethodRequest/oneOf/1'
          pass: '#/components/schemas/PaymentMethodRequest/oneOf/2'
          cashback: '#/components/schemas/PaymentMethodRequest/oneOf/3'
      properties:
        provider:
          type: string
          enum:
          - telegram
          - stripe
          - yookassa
          - cloudpayments
        returnUrl:
          type: string
          format: uri
          nullable: true
    RefundRequest:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Price'
        reason:
          type: string
          maxLength: 256
      description: 'Частичный или полный возврат. Если amount не указан – полный возврат в валюте исходного платежа.

        '
      additionalProperties: false
    Refund:
      type: object
      required:
      - id
      - paymentId
      - amount
      - createdAt
      properties:
        id:
          type: string
        paymentId:
          type: string
        amount:
          $ref: '#/components/schemas/Price'
        createdAt:
          type: string
          format: date-time
    CertificateType:
      type: string
      enum:
      - denomination
      - passes
    Certificate:
      type: object
      required:
      - id
      - type
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/CertificateType'
        data:
          oneOf:
          - type: object
            title: DenominationCert
            required:
            - amount
            properties:
              amount:
                $ref: '#/components/schemas/Price'
          - type: object
            title: PassesCert
            required:
            - passes
            properties:
              passes:
                type: integer
                minimum: 1
          discriminator:
            propertyName: type
            mapping:
              denomination: '#/components/schemas/Certificate/properties/data/oneOf/0'
              passes: '#/components/schemas/Certificate/properties/data/oneOf/1'
        expiresAt:
          type: string
          format: date-time
          nullable: true
        ownerUserId:
          type: string
    CertificateCreateDto:
      type: object
      required:
      - type
      - data
      properties:
        type:
          $ref: '#/components/schemas/CertificateType'
        data:
          oneOf:
          - type: object
            required:
            - amount
            properties:
              amount:
                $ref: '#/components/schemas/Price'
          - type: object
            required:
            - passes
            properties:
              passes:
                type: integer
                minimum: 1
          discriminator:
            propertyName: type
            mapping:
              denomination: '#/components/schemas/CertificateCreateDto/properties/data/oneOf/0'
              passes: '#/components/schemas/CertificateCreateDto/properties/data/oneOf/1'
        expiresAt:
          type: string
          format: date-time
          nullable: true
        ownerUserId:
          type: string
      additionalProperties: false
    SeasonTicketPlan:
      type: object
      required:
      - id
      - name
      - price
      - passes
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          $ref: '#/components/schemas/Price'
        passes:
          type: integer
          minimum: 1
        eventIds:
          type: array
          items:
            type: string
    SeasonTicketPlanUpdateDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          $ref: '#/components/schemas/Price'
        passes:
          type: integer
          minimum: 1
        eventIds:
          type: array
          items:
            type: string
      additionalProperties: false
    SeasonTicketStatus:
      type: string
      enum:
      - ACTIVE
      - EXPIRED
      - CANCELLED
    SeasonTicket:
      type: object
      required:
      - id
      - planId
      - userId
      - status
      - remainingPasses
      properties:
        id:
          type: string
        planId:
          type: string
        userId:
          type: string
        status:
          $ref: '#/components/schemas/SeasonTicketStatus'
        remainingPasses:
          type: integer
          minimum: 0
        validUntil:
          type: string
          format: date-time
          nullable: true
    CashbackWallet:
      type: object
      required:
      - balance
      properties:
        balance:
          $ref: '#/components/schemas/Price'
        history:
          type: array
          items:
            type: object
            required:
            - id
            - amount
            - type
            - createdAt
            properties:
              id:
                type: string
              type:
                type: string
                enum:
                - EARN
                - REDEEM
                - ADJUST
              amount:
                $ref: '#/components/schemas/Price'
              createdAt:
                type: string
                format: date-time
              note:
                type: string
                nullable: true
    CashbackRules:
      type: object
      required:
      - earnRates
      - maxRedeemRate
      properties:
        earnRates:
          type: array
          items:
            type: object
            required:
            - product
            - rate
            properties:
              product:
                type: string
                enum:
                - single
                - certificate
                - seasonTicket
              rate:
                type: number
                minimum: 0
                maximum: 1
                description: Доля начисления (0.05 = 5%)
        maxRedeemRate:
          type: number
          minimum: 0
          maximum: 1
          description: Максимальная доля оплаты кэшбэком от цены
    WaitlistEntry:
      type: object
      required:
      - id
      - sessionId
      - userId
      - createdAt
      properties:
        id:
          type: string
        sessionId:
          type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        position:
          type: integer
          minimum: 1
    AuditLog:
      type: object
      required:
      - id
      - ts
      - actorUserId
      - action
      - subjectType
      - subjectId
      properties:
        id:
          type: string
        ts:
          type: string
          format: date-time
        actorUserId:
          type: string
        action:
          type: string
        subjectType:
          type: string
        subjectId:
          type: string
    SessionStatus:
      type: string
      enum:
      - SCHEDULED
      - CANCELLED
    SessionCreateDto:
      type: object
      required:
      - startsAt
      properties:
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
          description: Вместимость сессии. Если не указана, используется capacity из события.
        labels:
          type: array
          items:
            type: string
          description: Ярлыки сессии.
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
      additionalProperties: false
    SessionUpdateDto:
      type: object
      properties:
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
        capacity:
          type: integer
          minimum: 0
          nullable: true
        labels:
          type: array
          items:
            type: string
          description: Ярлыки сессии.
        attributes:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items:
                type: string
          description: Произвольные атрибуты (типизированная карта ключ→значение). Управляются админом.
      additionalProperties: false
    JobExecutionResult:
      type: object
      required:
      - expired
      properties:
        expired:
          type: integer
          description: Количество обработанных записей
    PaymentNextAction:
      oneOf:
      - $ref: '#/components/schemas/PaymentNextActionOpenInvoice'
      - $ref: '#/components/schemas/PaymentNextActionRedirect'
      - $ref: '#/components/schemas/PaymentNextActionNone'
      discriminator:
        propertyName: type
        mapping:
          openInvoice: '#/components/schemas/PaymentNextActionOpenInvoice'
          redirect: '#/components/schemas/PaymentNextActionRedirect'
          none: '#/components/schemas/PaymentNextActionNone'
    PaymentNextActionOpenInvoice:
      type: object
      required:
      - type
      - slugOrUrl
      properties:
        type:
          type: string
          enum:
          - openInvoice
        slugOrUrl:
          type: string
    PaymentNextActionRedirect:
      type: object
      required:
      - type
      - url
      properties:
        type:
          type: string
          enum:
          - redirect
        url:
          type: string
          format: uri
    PaymentNextActionNone:
      type: object
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - none
    CompositePaymentMethodRequest:
      type: object
      required:
      - methods
      properties:
        methods:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PaymentMethodRequest'
    TelegramUser:
      type: object
      properties:
        id:
          type: integer
        is_bot:
          type: boolean
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
    SuccessfulPayment:
      type: object
      properties:
        currency:
          type: string
        total_amount:
          type: integer
        invoice_payload:
          type: string
        telegram_payment_charge_id:
          type: string
        provider_payment_charge_id:
          type: string
      required:
      - currency
      - total_amount
      - invoice_payload
      - telegram_payment_charge_id
    Message:
      type: object
      properties:
        message_id:
          type: integer
        from:
          $ref: '#/components/schemas/TelegramUser'
        date:
          type: integer
        chat:
          type: object
          additionalProperties: true
        successful_payment:
          $ref: '#/components/schemas/SuccessfulPayment'
    OrderInfo:
      type: object
      additionalProperties: true
    PreCheckoutQuery:
      type: object
      properties:
        id:
          type: string
        from:
          $ref: '#/components/schemas/TelegramUser'
        currency:
          type: string
        total_amount:
          type: integer
        invoice_payload:
          type: string
        shipping_option_id:
          type: string
        order_info:
          $ref: '#/components/schemas/OrderInfo'
      required:
      - id
      - from
      - currency
      - total_amount
      - invoice_payload
    TelegramUpdate:
      type: object
      properties:
        update_id:
          type: integer
        pre_checkout_query:
          $ref: '#/components/schemas/PreCheckoutQuery'
        message:
          $ref: '#/components/schemas/Message'
      additionalProperties: true
  examples:
    TelegramUpdatePreCheckout:
      summary: pre_checkout_query
      value:
        update_id: 123456789
        pre_checkout_query:
          id: '9047436821904'
          from:
            id: 11111111
            is_bot: false
            first_name: Alice
          currency: EUR
          total_amount: 5000
          invoice_payload: booking:ab12cd34-ef56-7890-ab12-cd34ef567890
          order_info:
            name: Alice
            email: alice@example.com
    TelegramUpdateSuccessfulPayment:
      summary: successful_payment
      value:
        update_id: 123456790
        message:
          message_id: 42
          from:
            id: 11111111
            is_bot: false
            first_name: Alice
          date: 1690000000
          chat:
            id: 11111111
            type: private
          successful_payment:
            currency: EUR
            total_amount: 5000
            invoice_payload: booking:ab12cd34-ef56-7890-ab12-cd34ef567890
            telegram_payment_charge_id: tgch_7fR12U
            provider_payment_charge_id: pi_3NhA9d8W0
    ErrHoldExpired:
      summary: Hold expired
      value:
        code: HOLD_EXPIRED
        message: Hold expired. Please rebook.
        details:
          holdTtlSec: 0
    ErrNoSeats:
      summary: No seats left
      value:
        code: NO_SEATS
        message: No seats remaining for the selected session.
    ErrAmountMismatch:
      summary: Amount mismatch
      value:
        code: AMOUNT_MISMATCH
        message: Calculated amount differs from invoice amount.
        details:
          expectedMinor: 5000
          actualMinor: 5200
    ErrProviderUnavailable:
      summary: Provider unavailable
      value:
        code: PROVIDER_UNAVAILABLE
        message: Payment provider unavailable. Try again later.
    PaymentNextActionOpenInvoice:
      summary: openInvoice
      value:
        id: pay_01HXY8Y8Z
        status: PENDING
        provider: telegram
        providerPaymentId: null
        providerChargeId: null
        currency: EUR
        amount: 5000
        nextAction:
          type: openInvoice
          slugOrUrl: SOME-INVOICE-SLUG-OR-URL
    PaymentNextActionRedirect:
      summary: redirect
      value:
        id: pay_01HXY9AB2
        status: PENDING
        provider: stripe
        currency: EUR
        amount: 5000
        nextAction:
          type: redirect
          url: https://checkout.stripe.com/c/pay_cs_test_123
    PaymentSucceededNone:
      summary: succeeded none
      value:
        id: pay_01HXYCDEF
        status: SUCCEEDED
        provider: other
        currency: EUR
        amount: 0
        nextAction:
          type: none
paths:
  /auth/telegram:
    post:
      tags:
      - Auth
      summary: Логин через Telegram initData
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramLoginDto'
      responses:
        '200':
          description: Успешная аутентификация через Telegram
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/login:
    post:
      tags:
      - Auth
      summary: Логин по email/username и паролю
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
            examples:
              emailLogin:
                summary: Логин по email
                value:
                  login: user@example.com
                  password: SecurePassword123
              usernameLogin:
                summary: Логин по username
                value:
                  login: johndoe
                  password: SecurePassword123
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: INVALID_CREDENTIALS
                message: Invalid login credentials
  /auth/register:
    post:
      tags:
      - Auth
      summary: Регистрация нового пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
            examples:
              regularUserByEmail:
                summary: Регистрация обычного пользователя по email
                value:
                  email: newuser@example.com
                  password: SecurePassword123
                  firstName: Иван
                  lastName: Иванов
                  phone: "+79001234567"
              regularUserByUsername:
                summary: Регистрация обычного пользователя по username
                value:
                  username: ivan_ivanov
                  password: SecurePassword123
                  firstName: Иван
                  lastName: Иванов
                  email: ivan@example.com
              adminCreatesAdmin:
                summary: Админ создает нового админа
                value:
                  email: admin@example.com
                  username: admin_user
                  password: AdminPassword456
                  firstName: Admin
                  lastName: User
                  role: ADMIN
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                weakPassword:
                  summary: Слабый пароль
                  value:
                    code: WEAK_PASSWORD
                    message: Password must be at least 6 characters long
                invalidEmail:
                  summary: Некорректный email
                  value:
                    code: INVALID_EMAIL
                    message: Invalid email format
        '403':
          description: Недостаточно прав для указания роли
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: FORBIDDEN
                message: Only admins can specify user role during registration
        '409':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: USER_EXISTS
                message: User with this email or username already exists
  /auth/refresh:
    post:
      tags:
      - Auth
      summary: Обновление accessToken по refreshToken (ротация refresh)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Новые токены
          content:
            application/json:
              schema:
                type: object
                required:
                - accessToken
                - refreshToken
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/logout:
    post:
      tags:
      - Auth
      summary: Инвалидация refresh токена (logout)
      responses:
        '204':
          description: Логаут выполнен
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      tags:
      - Users
      summary: Список пользователей (ADMIN)
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                - items
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  next:
                    type: string
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /users/{id}:
    get:
      tags:
      - Users
      summary: Получить пользователя (self или ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - Users
      summary: Обновить профиль (self)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}/cashback:
    get:
      tags:
      - Cashback
      summary: Баланс кэшбэка пользователя (self или ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashbackWallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /cashback/rules:
    get:
      tags:
      - Cashback
      summary: Правила начисления/списания кэшбэка (read-only)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashbackRules'
  /events:
    get:
      tags:
      - Events
      summary: Каталог событий
      parameters:
      - in: query
        name: q
        schema:
          type: string
        description: Поиск по названию/описанию
      - $ref: '#/components/parameters/StartsAfterParam'
      - $ref: '#/components/parameters/EndsBeforeParam'
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      - $ref: '#/components/parameters/LabelsAnyParam'
      - $ref: '#/components/parameters/LabelsAllParam'
      - $ref: '#/components/parameters/LabelsNoneParam'
      - $ref: '#/components/parameters/AttrEqParam'
      - $ref: '#/components/parameters/AttrInParam'
      - $ref: '#/components/parameters/AttrGteParam'
      - $ref: '#/components/parameters/AttrLteParam'
      - $ref: '#/components/parameters/AttrBoolParam'
      - $ref: '#/components/parameters/AttrExistsParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  next:
                    type: string
                    nullable: true
    post:
      tags:
      - Events
      summary: Создать событие (ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /events/{id}:
    get:
      tags:
      - Events
      summary: Получить событие
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
  /events/{id}/sessions:
    get:
      tags:
      - Sessions
      summary: Сессии события (возвращает eventId вместо полного события)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/StartsAfterParam'
      - $ref: '#/components/parameters/EndsBeforeParam'
      - $ref: '#/components/parameters/MinRemainingSeatsParam'
      - $ref: '#/components/parameters/SortByParam'
      - $ref: '#/components/parameters/SortOrderParam'
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      - $ref: '#/components/parameters/LabelsAnyParam'
      - $ref: '#/components/parameters/LabelsAllParam'
      - $ref: '#/components/parameters/LabelsNoneParam'
      - $ref: '#/components/parameters/AttrEqParam'
      - $ref: '#/components/parameters/AttrInParam'
      - $ref: '#/components/parameters/AttrGteParam'
      - $ref: '#/components/parameters/AttrLteParam'
      - $ref: '#/components/parameters/AttrBoolParam'
      - $ref: '#/components/parameters/AttrExistsParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionCompact'
                  next:
                    type: string
                    nullable: true
    post:
      tags:
      - Sessions
      - Admin
      summary: Создать сессии для события (ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/SessionCreateDto'
              - type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/SessionCreateDto'
      responses:
        '201':
          description: Сессии созданы
          content:
            application/json:
              schema:
                type: object
                required:
                - items
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionCompact'
        '401': &id001
          $ref: '#/components/responses/Unauthorized'
        '403': &id002
          $ref: '#/components/responses/Forbidden'
        '404': &id003
          $ref: '#/components/responses/NotFound'
        '409': &id004
          $ref: '#/components/responses/Conflict'
  /sessions:
    get:
      tags:
      - Sessions
      summary: Поиск сессий (возвращает полное событие)
      parameters:
      - in: query
        name: eventId
        schema:
          type: string
      - $ref: '#/components/parameters/StartsAfterParam'
      - $ref: '#/components/parameters/EndsBeforeParam'
      - $ref: '#/components/parameters/MinRemainingSeatsParam'
      - $ref: '#/components/parameters/SortByParam'
      - $ref: '#/components/parameters/SortOrderParam'
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      - $ref: '#/components/parameters/LabelsAnyParam'
      - $ref: '#/components/parameters/LabelsAllParam'
      - $ref: '#/components/parameters/LabelsNoneParam'
      - $ref: '#/components/parameters/AttrEqParam'
      - $ref: '#/components/parameters/AttrInParam'
      - $ref: '#/components/parameters/AttrGteParam'
      - $ref: '#/components/parameters/AttrLteParam'
      - $ref: '#/components/parameters/AttrBoolParam'
      - $ref: '#/components/parameters/AttrExistsParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
                  next:
                    type: string
                    nullable: true
  /sessions/{id}:
    get:
      tags:
      - Sessions
      summary: Получить сессию
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - Sessions
      - Admin
      summary: Обновить сессию (ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401': *id001
        '403': *id002
        '404': *id003
        '409': *id004
    delete:
      tags:
      - Sessions
      - Admin
      summary: Отменить сессию (перевод в статус CANCELLED) (ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Отменено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401': *id001
        '403': *id002
        '404': *id003
        '409': *id004
  /sessions/{id}/book:
    post:
      tags:
      - Bookings
      summary: Забронировать места в сессии
      description: |
        Создает бронирование для сессии. Поведение зависит от роли пользователя:
        
        **Для обычных пользователей (USER):**
        - Создает бронирование для текущего пользователя
        - Принимает только поле `quantity`
        - Всегда создает статус HOLD
        
        **Для администраторов (ADMIN):**
        - Может создать бронирование для любого пользователя или гостя
        - Поддерживает дополнительные поля: `userId`, `guestContact`, `status`, `notes`
        - Может сразу подтвердить бронирование (status: CONFIRMED) для офлайн оплаты
        - Если не указан userId или guestContact, создает для текущего пользователя
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateDto'
            examples:
              userBooking:
                summary: Обычное бронирование пользователем
                value:
                  quantity: 2
              adminForUser:
                summary: Админ бронирует для зарегистрированного пользователя
                value:
                  quantity: 2
                  userId: user_456
                  status: CONFIRMED
                  notes: Оплачено наличными в офисе
              adminForGuest:
                summary: Админ бронирует для гостя без регистрации
                value:
                  quantity: 1
                  guestContact:
                    phone: "+79001234567"
                    firstName: Иван
                    lastName: Петров
                    email: ivan@example.com
                  status: HOLD
                  notes: Позвонить за день до тренировки для подтверждения
              adminForSelf:
                summary: Админ бронирует для себя с заметкой
                value:
                  quantity: 1
                  status: CONFIRMED
                  notes: Тестовое бронирование
      responses:
        '201':
          description: Бронирование создано
          headers:
            X-Hold-TTL:
              description: Время жизни брони в секундах (только для статуса HOLD)
              schema:
                type: integer
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Booking'
                - $ref: '#/components/schemas/BookingExtended'
        '400':
          description: Некорректные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Недостаточно прав (попытка использовать админские поля без роли ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /bookings:
    get:
      tags:
      - Bookings
      summary: Список бронирований (self или ADMIN с расширенными возможностями фильтрации)
      parameters:
      - in: query
        name: userId
        schema:
          type: string
        description: Фильтр по ID пользователя. Доступно только ADMIN для просмотра чужих бронирований. По умолчанию возвращаются бронирования текущего пользователя.
      - in: query
        name: sessionId
        schema:
          type: string
        description: Фильтр по ID сессии. Доступно только ADMIN для получения всех бронирований конкретной сессии.
      - in: query
        name: status
        schema:
          type: string
          enum:
          - HOLD
          - CONFIRMED
          - CANCELLED
          - EXPIRED
        description: Фильтр по статусу бронирования. Доступно только ADMIN.
      - in: query
        name: bookingType
        schema:
          type: string
          enum:
          - registered
          - guest
          - all
          default: all
        description: Фильтр по типу бронирования (зарегистрированные пользователи / гости / все). Доступно только ADMIN.
      - in: query
        name: includeUser
        schema:
          type: boolean
          default: false
        description: Включить информацию о пользователе в ответ. Доступно только ADMIN.
      - in: query
        name: includeSession
        schema:
          type: boolean
          default: false
        description: Включить полную информацию о сессии в ответ. Доступно только ADMIN.
      - in: query
        name: includePaymentInfo
        schema:
          type: boolean
          default: false
        description: Включить информацию об оплате в ответ. Доступно только ADMIN.
      - in: query
        name: includeGuestContact
        schema:
          type: boolean
          default: false
        description: Включить контактные данные гостей в ответ. Доступно только ADMIN.
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Booking'
                        - $ref: '#/components/schemas/BookingExtended'
                  next:
                    type: string
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /bookings/{id}:
    get:
      tags:
      - Bookings
      summary: Получить бронирование
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - Bookings
      - Admin
      summary: Обновить бронирование (ADMIN)
      description: |
        Позволяет администратору обновить данные бронирования:
        - Контактную информацию гостя
        - Заметки администратора
        - Количество мест (при наличии свободных)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: Новое количество мест
                guestContact:
                  $ref: '#/components/schemas/GuestContact'
                  description: Обновленные контактные данные гостя
                notes:
                  type: string
                  maxLength: 1000
                  description: Обновленные заметки администратора
              additionalProperties: false
      responses:
        '200':
          description: Бронирование обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingExtended'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Конфликт (например, недостаточно мест для увеличения количества)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bookings/{id}/cancel:
    post:
      tags:
      - Bookings
      summary: Отмена брони (self для HOLD/CONFIRMED в рамках политики, либо ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Отменено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /bookings/{id}/confirm:
    post:
      tags:
      - Bookings
      summary: Подтвердить бронирование (офлайн оплата, ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Подтверждено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /bookings/{id}/payment:
    post:
      tags:
      - Payments
      summary: Оплата бронирования одной из стратегий (card|certificate|pass|cashback)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      - name: Idempotency-Key
        in: header
        required: false
        schema:
          type: string
        description: Idempotency key for safely retrying payment creation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
              oneOf:
              - $ref: '#/components/schemas/PaymentMethodRequest'
              - $ref: '#/components/schemas/CompositePaymentMethodRequest'
            examples:
              card_telegram:
                summary: Card via Telegram invoice
                value:
                  method: card
                  provider: telegram
              card_stripe:
                summary: Card via Stripe (external PSP)
                value:
                  method: card
                  provider: stripe
                  returnUrl: https://app.example.com/payments/return
              composite:
                summary: 'Composite: certificate + cashback + card(telegram)'
                value:
                  methods:
                  - method: certificate
                    certificateId: cert_123
                  - method: cashback
                    amount: 1500
                  - method: card
                    provider: telegram
      responses:
        '201':
          description: Платёж создан/инициирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                openInvoice:
                  $ref: '#/components/examples/PaymentNextActionOpenInvoice'
                redirect:
                  $ref: '#/components/examples/PaymentNextActionRedirect'
                succeededNone:
                  $ref: '#/components/examples/PaymentSucceededNone'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                holdExpired:
                  $ref: '#/components/examples/ErrHoldExpired'
                noSeats:
                  $ref: '#/components/examples/ErrNoSeats'
                amountMismatch:
                  $ref: '#/components/examples/ErrAmountMismatch'
                providerUnavailable:
                  $ref: '#/components/examples/ErrProviderUnavailable'
      description: "Creates or continues a payment for the specified booking (booking must be in HOLD state).\n\nScenarios:\n1) **Telegram invoice (Mini App)**\n   Request: `{\"method\":\"card\",\"provider\":\"telegram\"}`\n   Response `201`: `Payment{ status:PENDING, provider:'telegram', nextAction:{ type:'openInvoice', slugOrUrl } }`\n   Client: call `Telegram.WebApp.openInvoice(slugOrUrl)`, then on `invoiceClosed('paid')` or via polling call `GET /payments/{id}`.\n   Server: via `/webhooks/telegram/bot` handles `pre_checkout_query` (≤10s) and `successful_payment`, sets `Payment=SUCCEEDED` and `Booking=CONFIRMED`.\n\n2) **External PSP (redirect or embedded)**\n   Request: `{\"method\":\"card\",\"provider\":\"stripe\",\"returnUrl\":\"https://...\"}`\n   Response `201`: `Payment{ status:PENDING, provider:'stripe', nextAction:{ type:'redirect', url } }`\n   Client: open `url` inside WebApp; on return to `returnUrl`, poll `GET /payments/{id}`.\n   Server: confirms via `/webhooks/payments/provider`.\n\
        \n3) **Composite payments (certificate/pass/cashback + card)**\n   Request:\n   {\n     \"methods\": [\n       {\"method\":\"certificate\",\"certificateId\":\"cert_123\"},\n       {\"method\":\"cashback\",\"amount\": 1500},\n       {\"method\":\"card\",\"provider\":\"telegram\"}\n     ]\n   }\n   Response `201`: \n     - If remainder > 0 → `nextAction.openInvoice` (or `redirect`).\n     - If fully covered → `status:SUCCEEDED`, `nextAction:'none'`.\n\nConflicts (409):\n- `HOLD_EXPIRED` – hold TTL elapsed; re-book required.\n- `NO_SEATS` – seats not available anymore.\n- `AMOUNT_MISMATCH` – server-calculated amount differs from invoice amount.\n- `PROVIDER_UNAVAILABLE` – payment provider is temporarily unavailable.\n\nAll create/continue calls SHOULD be sent with `Idempotency-Key`.\n"
  /payments/{id}:
    get:
      tags:
      - Payments
      summary: Получить платёж
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /payments/{id}/refunds:
    post:
      tags:
      - Refunds
      summary: Создать возврат
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '201':
          description: Refund создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /certificates:
    post:
      tags:
      - Certificates
      summary: Выпустить сертификат (ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateCreateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
      - Certificates
      summary: Мои сертификаты (self) или все (ADMIN)
      parameters:
      - in: query
        name: userId
        schema:
          type: string
        description: Только ADMIN – просматривать по userId
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Certificate'
                  next:
                    type: string
                    nullable: true
  /season-ticket-plans:
    get:
      tags:
      - SeasonTickets
      summary: Каталог планов абонементов
      parameters:
      - in: query
        name: eventIds
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
        description: Фильтр по событиям. Вернёт планы, применимые хотя бы к одному из указанных событий (OR).
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SeasonTicketPlan'
                  next:
                    type: string
                    nullable: true
    post:
      tags:
      - SeasonTickets
      summary: Создать план (ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasonTicketPlan'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonTicketPlan'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /season-ticket-plans/{id}:
    patch:
      tags:
      - SeasonTickets
      summary: Обновить план (ADMIN, безопасный PATCH)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasonTicketPlanUpdateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonTicketPlan'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /season-ticket-plans/{id}/purchase:
    post:
      tags:
      - SeasonTickets
      - Payments
      summary: Покупка абонемента (userId берётся из токена)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
      responses:
        '201':
          description: Платёж на покупку абонемента создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /season-tickets:
    get:
      tags:
      - SeasonTickets
      summary: Список абонементов (self или ADMIN)
      parameters:
      - in: query
        name: userId
        schema:
          type: string
        description: Только ADMIN – фильтр по userId
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SeasonTicket'
                  next:
                    type: string
                    nullable: true
  /sessions/{id}/waitlist:
    post:
      tags:
      - Waitlist
      summary: Встать в лист ожидания
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/IdempotencyKeyHeader'
      responses:
        '201':
          description: Добавлен в waitlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WaitlistEntry'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /users/{id}/waitlist:
    get:
      tags:
      - Waitlist
      summary: Лист ожидания пользователя (self или ADMIN)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WaitlistEntry'
                  next:
                    type: string
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /admin/audit-logs:
    get:
      tags:
      - Admin
      summary: Аудит-логи (ADMIN)
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  next:
                    type: string
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /admin/jobs/run/booking-expiry:
    post:
      tags:
      - Jobs
      - Admin
      summary: Запустить задачу истечения броней (ADMIN)
      responses:
        '200':
          description: Задача выполнена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /admin/jobs/run/certificate-expiry:
    post:
      tags:
      - Jobs
      - Admin
      summary: Запустить задачу истечения сертификатов (ADMIN)
      responses:
        '200':
          description: Задача выполнена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /admin/jobs/run/season-ticket-expiry:
    post:
      tags:
      - Jobs
      - Admin
      summary: Запустить задачу истечения абонементов (ADMIN)
      responses:
        '200':
          description: Задача выполнена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /webhooks/payments/provider:
    post:
      tags:
      - Webhooks
      summary: Вебхук от платёжного провайдера
      security: []
      parameters:
      - in: header
        name: X-Signature
        required: true
        schema:
          type: string
        description: Сигнатура запроса от провайдера
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload провайдера (зависит от интеграции)
      responses:
        '200':
          description: OK (идемпотентная обработка; повторы допустимы)
        '400':
          description: Bad signature/payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks/telegram/bot:
    post:
      summary: Telegram Bot webhook for payments
      description: 'Receives Telegram Bot API updates (payments).

        - On `pre_checkout_query`: verify booking hold & amount, then call Bot API `answerPreCheckoutQuery` within 10 seconds.

        - On `successful_payment`: set Payment=SUCCEEDED and Booking=CONFIRMED.

        '
      security: []
      parameters:
      - name: X-Telegram-Bot-Api-Secret-Token
        in: header
        required: true
        schema:
          type: string
        description: Secret token set via setWebhook to verify Telegram as the sender.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUpdate'
            examples:
              pre_checkout_query:
                $ref: '#/components/examples/TelegramUpdatePreCheckout'
              successful_payment:
                $ref: '#/components/examples/TelegramUpdateSuccessfulPayment'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (missing/invalid secret token)
        '500':
          description: Server error
